import requests
from typing import Dict, Any
import datetime

from .plugin import Plugin

class CryptoPlugin(Plugin):
    """
    A plugin to fetch the current rate, 7d change, community sentiment
    and latest news of a cryptocurrency from Coingecko.
    It first searches by the user's query, then gets detailed info.
    Finally, it returns a nicely formatted string with emojis.
    """

    def get_source_name(self) -> str:
        return "Coingecko (detailed)"

    def get_spec(self) -> [Dict]:
        return [{
            "name": "get_crypto_info",
            "description": (
                "Get detailed info about a cryptocurrency from Coingecko, including 7d price change, "
                "community sentiment (bullish %), some recent news, and a final opinion. "
                "Searches by name/symbol for flexibility."
            ),
            "parameters": {
                "type": "object",
                "properties": {
                    "asset": {
                        "type": "string",
                        "description": (
                            "User query for the crypto asset (e.g. 'bitcoin', 'toncoin', 'baby doge')."
                            " Must be in a format recognized by Coingecko search."
                        )
                    }
                },
                "required": ["asset"],
            },
        }]

    async def execute(self, function_name, helper, **kwargs) -> Dict[str, Any]:
        """
        1) –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç—ã –ø–æ /search (—á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ –Ω–æ–≤—ã–µ, –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–æ–Ω–µ—Ç—ã).
        2) –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç -> coin_id
        3) –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å /coins/{coin_id} —Å market_data=true, community_data=true, developer_data=true
                4) –ò–∑–≤–ª–µ–∫–∞–µ–º:
           - current_price (usd)
           - price_change_7d_percent
           - sentiment_votes_up_percentage (–ø—Ä–æ—Ü–µ–Ω—Ç 'bullish')
           - status_updates (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏)
        5) –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç c —ç–º–æ–¥–∑–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø–æ–ª–µ "formatted_answer"
        """

        user_query = kwargs["asset"].strip()
        if not user_query:
            return {
                "error": "Empty asset query",
                "formatted_answer": "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã."
            }

        # --- –®–∞–≥ 1: –ø–æ–∏—Å–∫ –ø–æ /search ---
        search_url = "https://api.coingecko.com/api/v3/search"
        try:
            search_resp = requests.get(search_url, params={"query": user_query}, timeout=10)
            search_data = search_resp.json()
        except Exception as e:
            return {
                "error": f"Failed to call Coingecko /search: {e}",
                "formatted_answer": "üöß –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Coingecko /search.",
            }

        coins_found = search_data.get("coins", [])
        if not coins_found:
            return {
                "error": f"No coin found for '{user_query}'",
                "formatted_answer": (
                    f"‚ùå –ù–µ –Ω–∞—à—ë–ª –º–æ–Ω–µ—Ç—É –ø–æ –∑–∞–ø—Ä–æ—Å—É '{user_query}'. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–∏–º–≤–æ–ª (–Ω–∞ –∞–Ω–≥–ª.), –Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, bitcoin."
                ),
            }

        first_coin = coins_found[0]
        coin_id = first_coin["id"]  # —Ä–µ–∞–ª—å–Ω—ã–π ID –Ω–∞ Coingecko (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'toncoin')

        # --- –®–∞–≥ 2: –¥–µ—Ç–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å /coins/{coin_id} ---
        details_url = (
            f"https://api.coingecko.com/api/v3/coins/{coin_id}"
            "?localization=false&tickers=false"
            "&market_data=true&community_data=true&developer_data=true"
            "&sparkline=false"
                    )
        try:
            resp = requests.get(details_url, timeout=10)
            coin_data = resp.json()
        except Exception as e:
            return {
                "error": f"Failed to fetch coin details for '{coin_id}': {e}",
                "formatted_answer": f"üöß –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ /coins/{coin_id} : {e}",
            }

        # --- –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ ---
        name = coin_data.get("name", "?")
        symbol = coin_data.get("symbol", "?").upper()
        market_data = coin_data.get("market_data", {})

        # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (USD)
        current_price = market_data.get("current_price", {}).get("usd")
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 7 –¥–Ω–µ–π (–≤ %)
        price_change_7d = None
        if market_data.get("price_change_percentage_7d_in_currency"):
            price_change_7d = market_data["price_change_percentage_7d_in_currency"].get("usd")

        # –ü—Ä–æ—Ü–µ–Ω—Ç bullish-–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        votes_up = coin_data.get("sentiment_votes_up_percentage", 0.0)
        bullish_percent = votes_up  # –û–∫—Ä—É–≥–ª–∏–º –ø–æ–∑–∂–µ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (status_updates)
        status_updates = coin_data.get("status_updates", [])
        # –í–æ–∑—å–º—ë–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ 2 –Ω–æ–≤–æ—Å—Ç–µ–π
        news_list = []
        for update in status_updates[:2]:
            created_at = update.get("created_at")  # –∏–Ω–æ–≥–¥–∞ ISO8601, –∏–Ω–æ–≥–¥–∞ unix timestamp
            desc = update.get("description", "")
            # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫—É—é —Å—Ç—Ä–æ–∫—É
            news_item = f"‚Ä¢ {desc} (–¥–∞—Ç–∞: {created_at})"
            news_list.append(news_item)

        # --- –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏ ---
        date_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
        price_str = f"{current_price:.2f} $" if current_price is not None else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        change_7d_str = f"{price_change_7d:.2f}%" if price_change_7d is not None else "N/A"
        bullish_str = f"{bullish_percent:.2f}%"
        answer_lines = [
            f"ü™ô *{name}* (—Å–∏–º–≤–æ–ª: {symbol})",
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price_str}",
            f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 7 –¥–Ω–µ–π: {change_7d_str}",
            f"üë• –ü—Ä–∏–º–µ—Ä–Ω–æ {bullish_str} —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –º–æ–Ω–µ—Ç–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Ç–∏",
            "",
        ]

        if news_list:
            answer_lines.append("üì∞ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏*:")
            for n in news_list:
                answer_lines.append(n)
        else:
            answer_lines.append("üì∞ –ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ Coingecko.")

        answer_lines.append("")
        answer_lines.append("ü§î –ú–æ–π —Å–æ–≤–µ—Ç: DYOR –∏ —É–¥–∞—á–∏! üöÄ")
        answer_lines.append(f"_–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ {date_str}_")

        formatted_answer = "\n".join(answer_lines)

        return {
            "asset_searched": user_query,
            "coin_id": coin_id,
            "formatted_answer": formatted_answer,
            "name": name,
            "symbol": symbol,
            "current_price_usd": current_price,
            "price_change_7d_percent": price_change_7d,
            "bullish_percent": bullish_percent,
            "latest_news_count": len(news_list),
        }
